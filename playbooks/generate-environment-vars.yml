---
## Usage create a set of variables that the tools team will use for our deployments.
## This will create
##   - proxy environment options options when "http_proxy_server" is defined. The no proxy configuration is optional.
##   - haproxy configurations for our internal tooling
##   - beat service state options
##
## Playbook options:
##  - "http_proxy_server" (OPTIONAL)
##  - "https_proxy_server" (OPTIONAL)
##  - "extra_no_proxy_hosts" (OPTIONAL)
##  - "java_http_proxy" (OPTIONAL)
##  - "java_https_proxy_port" (OPTIONAL)
##  - "java_https_proxy" (OPTIONAL)
##  - "java_https_proxy_port" (OPTIONAL)
##  - "var_location" (OPTIONAL) variable directory path
##  - "file_location" (OPTIONAL) variable file path
##
## When defining a proxy, the http(s)_proxy_server variables must be in the form of a URL with a specified port.

# USAGE:$ (openstack-ansible || ansible-playbook) generate-environment-vars.yml -e 'http_proxy_server=https://proxy_server.local:3128'

- name: Create user tools variables file
  hosts: localhost
  connection: local
  user: root
  gather_facts: no
  vars:
    http_proxy_server: "none://none:none"
    java_http_proxy: "{{ (http_proxy_server).split(':')[1].strip('/') }}"
    java_https_proxy: "{{ (https_proxy_server | default(http_proxy_server)).split(':')[1].strip('/') }}"
    java_http_proxy_port: "{{ (http_proxy_server).split(':')[2].strip('/') }}"
    java_https_proxy_port: "{{ (https_proxy_server | default(http_proxy_server)).split(':')[2].strip('/') }}"
    no_proxy_hosts:
      - localhost
      - 127.0.0.1
      - "{{ ((groups['rabbitmq_all'] | default([])) | union((groups['log_containers'] | default([])))) | map('extract', hostvars, 'ansible_host') | list | join(',') }}"
    var_location: "/etc/openstack_deploy"
  tasks:
    - name: State config directory
      stat:
        path: "{{ var_location }}"
      register: config_dir

    - name: Ensure openstack-deploy directory exists
      file:
        path: "{{ var_location }}"
        state: directory
      when:
        - not config_dir.stat.exists

    - name: Create user_tools_variables.yml
      template:
        src: templates/user_tools_variables.yml.j2
        dest: "{{ file_location | default(var_location + '/user_tools_variables.yml') }}"

    - name: Ensure environment files directory exists
      file:
        path: "{{ var_location }}/env.d"
        state: directory

    - name: Copy environment files
      copy:
        src: 'files/{{ item }}'
        dest: "{{ var_location }}/env.d/{{ item }}"
      with_items:
        - elk.yml
        - fleet.yml

    - name: Find log_hosts entries
      find:
        paths: /etc/openstack_deploy
        file_type: file
        contains: "^log_hosts:.*"
        patterns: "*.yml"
        recurse: yes
      register: log_hosts_entries

    - name: Set files fact
      set_fact:
        config_files: |-
          {% set paths = [] %}
          {% for item in log_hosts_entries.files %}
          {%   set _ = paths.append(item['path']) %}
          {% endfor %}
          {{ paths }}

    - name: Check for basic host line
      fail:
        msg: >-
          The log_hosts entry is more complex than this playbook can deal with. Set the 'log_hosts'
          and 'kolide_hosts' configuration manually to continue. file with complex input
          line [ {{ item }} ], line in question [ {{ lookup('file', item) | regex_search("^log_hosts:.*", multiline=True) }} ].
      when:
        - lookup('file', item) | regex_search("^log_hosts:\s\*", multiline=True)
      with_items: "{{ config_files }}"

    - name: Add log_hosts anchor
      lineinfile:
        path: "{{ item }}"
        line: 'log_hosts: &log_hosts'
        regexp: '^log_hosts.*'
      with_items: "{{ config_files }}"

    - name: Add kolide_hosts entries
      lineinfile:
        path: "{{ item }}"
        line: 'kolide_hosts: *log_hosts'
      with_items: "{{ config_files }}"

    - name: Add kolide secrets
      lineinfile:
        path: "/etc/openstack_deploy/user_secrets.yml"
        line: "{{ item }}: {{ lookup('password', '/dev/null length=20') }}"
        regexp: "^{{ item }}.*"
      when:
        - not (lookup('file', '/etc/openstack_deploy/user_secrets.yml') | regex_search("^" + item + ".*", multiline=True))
      with_items:
        - "kolide_fleet_db_password"
        - "kolide_fleet_jwt_key"
        - "kolide_fleet_admin_password"
        - "galera_root_password"
